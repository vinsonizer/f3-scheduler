service: f3-scheduler

useDotenv: true

configValidationMode: error

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  environment:
    PAX_TABLE: f3-scheduler-pax
    REGIONS_TABLE: f3-scheduler-regions
    AOS_TABLE: f3-scheduler-aos
    ASSIGNMENTS_TABLE: f3-scheduler-assignments
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.AOS_TABLE}"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.PAX_TABLE}"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.REGIONS_TABLE}"


functions:
  updateAssignment:
    handler: backend/update_assignment.handler
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}/assignments
          method: post
          cors: true
  listAssignments:
    handler: backend/get_assignment.getAll
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}/assignments
          method: get
          cors: true
  getAssignmentDetails:
    handler: backend/get_assignment.getById
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}/assignments/{timestamp}
          method: get
          cors: true
  updateAo:
    handler: backend/update_ao.handler
    events:
      - http:
          path: regions/{regionId}/aos
          method: post
          cors: true
  listAos:
    handler: backend/get_ao.getAll
    events:
      - http:
          path: regions/{regionId}/aos
          method: get
          cors: true
  getAoDetails:
    handler: backend/get_ao.getById
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}
          method: get
          cors: true
  updatePax:
    handler: backend/update_pax.handler
    events:
      - http:
          path: regions/{regionId}/pax
          method: post
          cors: true
  listPax:
    handler: backend/get_pax.getAll
    events:
      - http:
          path: regions/{regionId}/pax
          method: get
          cors: true
  getPaxDetails:
    handler: backend/get_pax.getById
    events:
      - http:
          path: regions/{regionId}/pax/{paxId}
          method: get
          cors: true
  updateRegion:
    handler: backend/update_region.handler
    events:
      - http:
          path: regions
          method: post
          cors: true
  listRegions:
    handler: backend/get_region.getAll
    events:
      - http:
          path: regions
          method: get
          cors: true
  getRegionDetails:
    handler: backend/get_region.getById
    events:
      - http:
          path: regions/{regionId}
          method: get
          cors: true

resources:
  Resources:
    aosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AOS_TABLE}
        AttributeDefinitions:
          - AttributeName: regionId
            AttributeType: S
          - AttributeName: aoId
            AttributeType: S
        KeySchema:
          - AttributeName: regionId
            KeyType: HASH
          - AttributeName: aoId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    assignmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ASSIGNMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: aoId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: aoId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    paxTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PAX_TABLE}
        AttributeDefinitions:
          - AttributeName: regionId
            AttributeType: S
          - AttributeName: paxId
            AttributeType: S
        KeySchema:
          - AttributeName: regionId
            KeyType: HASH
          - AttributeName: paxId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    regionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REGIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: regionId
            AttributeType: S
        KeySchema:
          - AttributeName: regionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-finch

custom:
  client:
    bucketName: ${env:FINCH_BUCKET_NAME}
    distributionFolder: frontend/build
    errorDocument: index.html
