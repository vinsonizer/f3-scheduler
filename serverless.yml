service: f3-scheduler

useDotenv: true

configValidationMode: error

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  environment:
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    PAX_TABLE: f3-scheduler-pax
    REGIONS_TABLE: f3-scheduler-regions
    AOS_TABLE: f3-scheduler-aos
    ASSIGNMENTS_TABLE: f3-scheduler-assignments
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminGetUser
            - cognito-idp:ListUsers
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.AOS_TABLE}"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.PAX_TABLE}"
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.REGIONS_TABLE}"

functions:
  # User signup and login functions
  loginUser:
    handler: backend/users.login
    events:
      - http:
          path: login
          method: post
          cors: true

  signupUser:
    handler: backend/users.signup
    events:
      - http:
          path: signup
          method: post
          cors: true

  getUser:
    handler: backend/users.getUser
    events:
      - http:
          path: user/{username}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  listUsers:
    handler: backend/users.listUsers
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  # Assignment management
  updateAssignment:
    handler: backend/update_assignment.handler
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}/assignments
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  listAssignments:
    handler: backend/get_all_assignments.handler
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}/assignments
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getAssignmentDetails:
    handler: backend/get_assignment_by_id.handler
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}/assignments/{timestamp}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  # AO Management
  updateAo:
    handler: backend/update_ao.handler
    events:
      - http:
          path: regions/{regionId}/aos
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  listAos:
    handler: backend/get_all_aos_by_region.handler
    events:
      - http:
          path: regions/{regionId}/aos
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getAoDetails:
    handler: backend/get_ao_by_id.handler
    events:
      - http:
          path: regions/{regionId}/aos/{aoId}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  # Pax Management
  updatePax:
    handler: backend/update_pax.handler
    events:
      - http:
          path: regions/{regionId}/pax
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  listPax:
    handler: backend/get_all_pax.handler
    events:
      - http:
          path: regions/{regionId}/pax
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getPaxDetails:
    handler: backend/get_pax_by_id.handler
    events:
      - http:
          path: regions/{regionId}/pax/{paxId}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  # Region Management
  updateRegion:
    handler: backend/update_region.handler
    events:
      - http:
          path: regions
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  listRegions:
    handler: backend/get_all_regions.handler
    events:
      - http:
          path: regions
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getRegionDetails:
    handler: backend/get_region_by_id.handler
    events:
      - http:
          path: regions/{regionId}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    aosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AOS_TABLE}
        AttributeDefinitions:
          - AttributeName: regionId
            AttributeType: S
          - AttributeName: aoId
            AttributeType: S
        KeySchema:
          - AttributeName: regionId
            KeyType: HASH
          - AttributeName: aoId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    assignmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ASSIGNMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: aoId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: aoId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    paxTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PAX_TABLE}
        AttributeDefinitions:
          - AttributeName: regionId
            AttributeType: S
          - AttributeName: paxId
            AttributeType: S
        KeySchema:
          - AttributeName: regionId
            KeyType: HASH
          - AttributeName: paxId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    regionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REGIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: regionId
            AttributeType: S
        KeySchema:
          - AttributeName: regionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: f3-scheduler-auth-pool
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: f3-scheduler-user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
